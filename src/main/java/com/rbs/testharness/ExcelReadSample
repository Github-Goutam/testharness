package com.rbs.testharness;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.rbs.testharness.common.THConstant;
import com.rbs.testharness.entity.PricingLookUpEntity;
import java.io.FileNotFoundException;

public class ExcelReadSample {

	static DataFormatter fmt = new DataFormatter();
	public static final String Risk_Band = "Risk Band";
	public static final String Borrowing_Amount = "Borrowing Amount";
	public static final String Term_Margin_Premium = "Term Margin Premimum";

	/**
	 * @param args the command line arguments
	 */
	public static void main(String[] args) throws FileNotFoundException, IOException {

		FileInputStream file = new FileInputStream(new File(
				"C:\\Users\\janani.ramalingam\\Documents\\workspace-sts-3.9.11.RELEASE\\testharness-master\\Sample Excel.xlsx"));

		XSSFWorkbook workbook = new XSSFWorkbook(file);
		List<PricingLookUpEntity> pricingLookUpEntityList = new ArrayList<PricingLookUpEntity>();
		int sheetNum = workbook.getNumberOfSheets();
		HashMap<Integer, String> colMap = new HashMap<Integer, String>();
		String newColName = "";
		boolean mergedFlag=false;
		for (int i = 0; i < sheetNum; i++) {
			XSSFSheet sheet = workbook.getSheetAt(i);
			System.out.println(sheet.getSheetName());
			XSSFRow rowNum = sheet.getRow(0);
			// String columnName=null;
			List<CellRangeAddress> regionsList = new ArrayList<CellRangeAddress>();
			for (int n = 0; n < sheet.getNumMergedRegions(); n++) {
				System.out.println(sheet.getMergedRegion(n));
				regionsList.add(sheet.getMergedRegion(n));

			}

			Iterator<Row> rowIterator = sheet.iterator();
			while (rowIterator.hasNext()) {
				Row row = rowIterator.next();
				int rowIndex = row.getRowNum();
				if (rowIndex < 1) {
					short minColIx = row.getFirstCellNum(); // get the first column index for a row
					short maxColIx = row.getLastCellNum(); // get the last column index for a row
					for (short colIx = minColIx; colIx < maxColIx; colIx++) { // loop from first to last index
						Cell cell = row.getCell(colIx); // get the cell
						colMap.put(cell.getColumnIndex(), cell.getStringCellValue()); // add the cell contents (name of
																						// column) and cell index to the
																						// map
					}
					continue;
				}

				Iterator<Cell> cellIterator = row.cellIterator();
				PricingLookUpEntity pricingLookUpEntity = new PricingLookUpEntity();
				while (cellIterator.hasNext()) {
					Cell cell = cellIterator.next();

					int columnIndex = cell.getColumnIndex();
					String columnName = "";
					String value = null;
					for (CellRangeAddress region : regionsList) {

						if (region.isInRange(cell.getRowIndex(), cell.getColumnIndex())) {

							int rowNumber = region.getFirstRow();
							int colIndex = region.getFirstColumn();
							cell = sheet.getRow(rowNumber).getCell(colIndex);
							value = ExcelReadSample.getValue(cell);
							
							System.out.println("Cel is in merged region. The value stored in that region is " + value
									+ "colIndex:::" + colIndex);
							if (colMap.get(columnIndex).equalsIgnoreCase("Term Factor")
									|| (newColName != null && newColName.equals("Term Factor"))) {
								newColName = colMap.get(columnIndex);
								if (pricingLookUpEntity.getTermFactor() != null ) {
									String newTermValue = pricingLookUpEntity.getTermFactor() + "&" + value;
									pricingLookUpEntity.setTermFactor(newTermValue);
								} else {
									pricingLookUpEntity.setTermFactor(value);
								}

							}
							if (colMap.get(columnIndex).equalsIgnoreCase("Risk Band")
									|| (newColName != null && newColName.equals("Risk Band"))) {
								newColName = colMap.get(columnIndex);
								if (pricingLookUpEntity.getRiskBand() != null) {
									// String newRiskValue=pricingLookUpEntity.getRiskBand()+"&"+value;
									pricingLookUpEntity.setRiskBand(Integer.parseInt(value));
								} else {
									pricingLookUpEntity.setRiskBand(Integer.parseInt(value));
								}

							} else if (colMap.get(columnIndex).equalsIgnoreCase("Borrowing Amount")
									|| (newColName != null && newColName.equals("Borrowing Amount"))) {
								newColName = colMap.get(columnIndex);
								if (pricingLookUpEntity.getBorrowingAmount() != null 
										&& !pricingLookUpEntity.getBorrowingAmount().contains("&")
										&& !pricingLookUpEntity.getBorrowingAmount().equals(value)) {
									String newRiskValue = pricingLookUpEntity.getBorrowingAmount() + "&" + value;
									pricingLookUpEntity.setBorrowingAmount(newRiskValue);
								} else {
									pricingLookUpEntity.setBorrowingAmount(value);
								}
								mergedFlag=true;
							}
							
						}
					}
					if (value == null) {
						value = ExcelReadSample.getValue(cell);
					}

					
					if (THConstant.Risk_Band.equalsIgnoreCase(colMap.get(columnIndex))) {
						System.out.println("Inside risk band");
						System.out.println("Hiiii " + ExcelReadSample.getValue(cell));
						// pricingLookUpEntity.setRiskBand((int) cell.getNumericCellValue());
					}
					
					  else if(pricingLookUpEntity.getTermFactor() == null && colMap.get(columnIndex).equalsIgnoreCase("Term Factor")) {
						  pricingLookUpEntity.setTermFactor(value); 
					  } 
					  else if(!mergedFlag && (colMap.get(columnIndex).equalsIgnoreCase("Borrowing Amount") || (newColName != null && newColName.equals("Borrowing Amount")))) 
					  {
						  newColName=colMap.get(columnIndex);
						  if(pricingLookUpEntity.getBorrowingAmount() == null) {
							  pricingLookUpEntity.setBorrowingAmount(value); 
						}
						 else if(!pricingLookUpEntity.getBorrowingAmount().contains("&")){
							  String newRiskValue = pricingLookUpEntity.getBorrowingAmount() + "&" + value;
							  pricingLookUpEntity.setBorrowingAmount(newRiskValue); 
						  }
						/*
						 * else { String newRiskValue = pricingLookUpEntity.getBorrowingAmount() + "&" +
						 * value; pricingLookUpEntity.setBorrowingAmount(newRiskValue); }
						 */
							  
					  }
					 

					/*
					 * else if(colMap.get(columnIndex).equalsIgnoreCase("AIR Rate") &&
					 * sheet.getSheetName().equalsIgnoreCase("SBL")) {
					 * System.out.println("Hiiii "+cell.getNumericCellValue());
					 * pricingLookUpEntity.setAirRate(cell.getNumericCellValue()); }
					 * 
					 * else if(colMap.get(columnIndex).equalsIgnoreCase("APR Rate") &&
					 * sheet.getSheetName().equalsIgnoreCase("SBL")) {
					 * pricingLookUpEntity.setAprRate(Double.valueOf(value)); } else
					 * if(colMap.get(columnIndex).equalsIgnoreCase("Margin Fee") &&
					 * (sheet.getSheetName().equalsIgnoreCase("Overdraft") ||
					 * sheet.getSheetName().equalsIgnoreCase("Agri"))) {
					 * pricingLookUpEntity.setMarginFee(Double.valueOf(value)); } else
					 * if(colMap.get(columnIndex).equalsIgnoreCase("Arrangement Fee") &&
					 * (sheet.getSheetName().equalsIgnoreCase("Overdraft")||
					 * sheet.getSheetName().equalsIgnoreCase("Agri"))) {
					 * pricingLookUpEntity.setArrangementFee(Double.valueOf(value)); } else
					 * if(colMap.get(columnIndex).equalsIgnoreCase("Start Margin") &&
					 * sheet.getSheetName().equalsIgnoreCase("Agri")) {
					 * pricingLookUpEntity.setStartMarginFee(Double.valueOf(value)); } else
					 * if(colMap.get(columnIndex).equalsIgnoreCase("Term Margin Premimum") &&
					 * sheet.getSheetName().equalsIgnoreCase("Agri")) {
					 * pricingLookUpEntity.setTermMarginPremium(Double.valueOf(value)); }
					 */

					boolean valid = true;
					if (valid) {
						continue;
					}

				}
				pricingLookUpEntityList.add(pricingLookUpEntity);

			}

			// pricingLookUpEntityList.forEach(System.out::println);

		}

		// TODO code application logic here
		System.out.println(pricingLookUpEntityList.size());
		System.out.println(pricingLookUpEntityList.get(0).getBorrowingAmount());
		System.out.println(pricingLookUpEntityList.get(1).getBorrowingAmount());
		System.out.println(pricingLookUpEntityList.get(2).getBorrowingAmount());
		System.out.println(pricingLookUpEntityList.get(3).getBorrowingAmount());
		System.out.println(pricingLookUpEntityList.get(4).getBorrowingAmount());
		System.out.println(pricingLookUpEntityList.get(5).getBorrowingAmount());
		System.out.println(pricingLookUpEntityList.get(2).getTermFactor());

	}

	private static String getValue(Cell cell) {
		switch (cell.getCellType()) {
		case Cell.CELL_TYPE_BLANK:
			return null;
		case Cell.CELL_TYPE_BOOLEAN:
			return "CELL_TYPE_BOOLEAN";
		case Cell.CELL_TYPE_ERROR:
			return "CELL_TYPE_ERROR";
		case Cell.CELL_TYPE_FORMULA:
			return "CELL_TYPE_FORMULA";
		case Cell.CELL_TYPE_NUMERIC:
			return fmt.formatCellValue(cell);
		case Cell.CELL_TYPE_STRING:
			return cell.getStringCellValue();
		default:
			return "none";

		}

	}
}
