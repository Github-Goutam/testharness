package com.rbs.testharness.common;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.springframework.util.ResourceUtils;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;

public class GeneratePdfHeaderFooterEvent  extends PdfPageEventHelper {

    private PdfTemplate t;
    private Image total;
    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");  
    LocalDateTime generatedTime = LocalDateTime.now();  
    private String userName;
    private String environmentName;
    private String testSetId;
    public GeneratePdfHeaderFooterEvent(String userName,String environmentName,String testSetId) {
    	this.userName=userName;
    	this.environmentName=environmentName;
    	this.testSetId=testSetId;
    }

    public void onOpenDocument(PdfWriter writer, Document document) {
        t = writer.getDirectContent().createTemplate(30, 16);
        try {
            total = Image.getInstance(t);
            total.setRole(PdfName.ARTIFACT);
        } catch (DocumentException de) {
            throw new ExceptionConverter(de);
        }
    }

    @Override
    public void onEndPage(PdfWriter writer, Document document) {
        addHeader(writer);
        addFooter(writer);
    }

    private void addHeader(PdfWriter writer){
        PdfPTable header = new PdfPTable(1);
        try {
        	header.setWidthPercentage(100);
            header.setWidths(new int[]{100});
            header.setTotalWidth(526);
            header.setLockedWidth(true);
            header.getDefaultCell().setCalculatedHeight(50);
            header.getDefaultCell().setBorder(Rectangle.BOTTOM);
            header.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);

            File file = ResourceUtils.getFile("classpath:static/header_image.png");
            Image logo = Image.getInstance(file.getAbsolutePath());
            header.addCell(logo);
            
            
            PdfPTable headerText = new PdfPTable(3);
            PdfPCell text1 = new PdfPCell(new Phrase("Generated By : "+userName, new Font(Font.FontFamily.HELVETICA, 7)));
            text1.setHorizontalAlignment(Element.ALIGN_LEFT);
            text1.setBorder(0);
            text1.setBorderColor(BaseColor.LIGHT_GRAY);
            headerText.addCell(text1);


            PdfPCell text2 = new PdfPCell(new Phrase("Environment : "+environmentName, new Font(Font.FontFamily.HELVETICA, 7)));
            text2.setHorizontalAlignment(Element.ALIGN_CENTER);
            text2.setBorder(0);
            text2.setBorderColor(BaseColor.LIGHT_GRAY);
            headerText.addCell(text2);


            PdfPCell text3 = new PdfPCell(new Phrase("Test Set Id : "+testSetId, new Font(Font.FontFamily.HELVETICA, 7)));
            text3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            text3.setBorder(0);
            text3.setBorderColor(BaseColor.LIGHT_GRAY);
            headerText.addCell(text3);

            header.addCell(headerText);
            
            // write content
            header.writeSelectedRows(0, -1, 34, 803, writer.getDirectContent());
            
        } catch(DocumentException de) {
            throw new ExceptionConverter(de);
        } catch (MalformedURLException e) {
            throw new ExceptionConverter(e);
        } catch (IOException e) {
            throw new ExceptionConverter(e);
        }
    }

    private void addFooter(PdfWriter writer){
        PdfPTable footer = new PdfPTable(3);
        try {
            // set defaults
            footer.setWidths(new int[]{10,2, 1});
            footer.setTotalWidth(527);
            footer.setLockedWidth(true);
            footer.getDefaultCell().setFixedHeight(40);
            footer.getDefaultCell().setBorder(Rectangle.TOP);
            footer.getDefaultCell().setBorderColor(new BaseColor(0, 45,100));

            footer.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
            footer.addCell(new Phrase("Report Generated on : "+dtf.format(generatedTime), new Font(Font.FontFamily.HELVETICA, 8)));

            // add current page count
            footer.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
            footer.addCell(new Phrase(String.format("Page %d of", writer.getPageNumber()), new Font(Font.FontFamily.HELVETICA, 8)));

            // add placeholder for total page count
            PdfPCell totalPageCount = new PdfPCell(total);
            totalPageCount.setBorder(Rectangle.TOP);
            totalPageCount.setBorderColor(BaseColor.LIGHT_GRAY);
            footer.addCell(totalPageCount);

            // write page
            PdfContentByte canvas = writer.getDirectContent();
            canvas.beginMarkedContentSequence(PdfName.ARTIFACT);
            footer.writeSelectedRows(0, -1, 34, 50, canvas);
            canvas.endMarkedContentSequence();
        } catch(Exception de) {
            throw new ExceptionConverter(de);
        }
    }

    public void onCloseDocument(PdfWriter writer, Document document) {
        int totalLength = String.valueOf(writer.getPageNumber()).length();
        int totalWidth = totalLength * 5;
        ColumnText.showTextAligned(t, Element.ALIGN_RIGHT,
                new Phrase(String.valueOf(writer.getPageNumber()), new Font(Font.FontFamily.HELVETICA, 8)),
                totalWidth, 6, 0);
    }
}